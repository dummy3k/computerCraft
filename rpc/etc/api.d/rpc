PROTOCOLL = "rpc"
VERSION = 46

local function get_info(obj)
	for k, v in pairs(obj) do
		print(k..": "..type(v))
	end
end

function lookup_str(s, g, _GG)
	if s == "shell" then
		return _GG[s]
	end
	
	-- if not g then
		-- g = _G
	-- end
	
	-- local obj = _G
	local obj = g
	for item in string.gmatch(s, "[^\\.]+") do
		obj = obj[item]
	end
	if not obj then
		print("lookup failed: ", s)
	end
	return obj
end

function getVersion()
	return VERSION
end

--------------------------------------------------------------------------------
--	Server
--------------------------------------------------------------------------------

--msg = {cmd="rpc", obj="math", method="min", args={1, 2}}
local cmd = {}
function cmd.rpc(host, msg, _GG)
	-- retVal = {_G[msg.obj][msg.method](unpack(msg.args))}
	-- local cmd_retVal = {lookup_str(msg.obj, _G, _GG)[msg.method](unpack(msg.args))}
	
	local cmd_retVal = nil
	local status, err = pcall(function ()
			cmd_retVal ={lookup_str(msg.obj, _G, _GG)[msg.method](unpack(msg.args))}
		end)
	
	
	-- retVal.token = msg.token
	local retVal = {ret=cmd_retVal, token=msg.token, status=status, err=err}
	retVal = textutils.serialize(retVal)
	-- print("retVal: ",retVal)
	rednet.send(host, retVal, PROTOCOLL)
end

function cmd.list(host, msg, _GG)
	local retVal = {}
	-- print(lookup_str(msg.obj))
	for k, v in pairs(lookup_str(msg.obj, _G, _GG)) do
		-- print(k..": "..type(v))
		retVal[k] = type(v)
	end
	
	-- retVal.token = msg.token
	-- retVal = textutils.serialize(retVal)
	-- print("retVal: ",retVal)
	rednet.send(host, textutils.serialize({ret=retVal, token=msg.token}), PROTOCOLL)
	-- rednet.send(host, retVal, PROTOCOLL)
end

function cmd.ping(host, msg, _GG)
	-- retVal = textutils.serialize(retVal)
	retVal = "pong"
	-- print("foo?")
	-- print("retVal: ",retVal)
	-- retVal.token = msg.token
	rednet.send(host, retVal, PROTOCOLL)
end

local function respond(host, msg, _GG)
	local fn_cmd = cmd[msg.cmd]
	if not fn_cmd then
		print("unkown cmd: ", msg.cmd)
	else
		fn_cmd(host, msg, _GG)
	end
end

function daemon(_GG)
	print("rpc v"..VERSION.." daemon started...")
	local msg = {cmd="startup", version=VERSION}
	rednet.broadcast(textutils.serialize(msg), PROTOCOLL)
	
	-- print("shell", shell)
	-- print("shell", _GG["shell"])
	-- local commands = {}
	-- commands["rpc"] = cmd_call
	-- commands["list"] = cmd_list
	-- commands["ping"] = cmd_ping
	-- commands["startup"] = function (...) end
	
	while true do
		host, msg, prot = rednet.receive(PROTOCOLL)
		-- print(host..", "..msg..", "..tostring(prot))
		-- print("<",msg)
		msg = textutils.unserialize(msg)
		respond(host, msg, _GG)
	end	
end

--------------------------------------------------------------------------------
--	Client
--------------------------------------------------------------------------------
local packetCount = 0

local function createToken()
	packetCount = packetCount + 1
	-- print("packetCount: ", packetCount)
	return tostring(os.getComputerID().."#"..tostring(packetCount))
end

function query(host, msg, verbose, timeout)
	local request_token = createToken()
	msg.token = request_token
	print(host,"<", msg.cmd, ", ", msg.token)
	local msg = textutils.serialize(msg)
	if verbose then
		print(host,"<", msg)
	end
	
	rednet.send(host, msg, PROTOCOLL)
	local p1, p2
	while true do
		p1, p2 = rednet.receive(PROTOCOLL, 2)
		-- print(p1..": "..tostring(p2))
		-- print(host, p1, "<", p2)
		if verbose then
			print(host,">", p2)
		end
		-- if not p2 then
			-- error("timeout")
			-- return
		-- end
		
		if p1 ~= host then
			respond(host, msg ,{})
		else
			msg = textutils.unserialize(p2)

			-- print("msg.cmd: ", msg.cmd)
			-- print(host, ">msg.token: ", msg.token, "#, #", request_token, "#")
			-- print(host,">", msg.cmd, ", ", msg.token)
			print(host,">", tostring(p2))
			if not msg.token then
				print("no token from ", p1)
			elseif msg.token == request_token then
				if msg.err then
					error("host"..host..": "..msg.err)
				end
				return msg.ret
			end
		end
	end
	error("wtf")
	-- return textutils.unserialize(p2)
end

function createProxy(host, obj, verbose, timeout)
	local retVal = {}
	for k, v in pairs(query(host, {cmd="list", obj=obj})) do
		-- print(k..": "..tostring(v))
		retVal[k] = function (...)
			local tArgs = {...}
			msg = {cmd="rpc", obj=obj, method=k, args=tArgs}
			return unpack(query(host, msg))
		end
	end
	return retVal
end

function createSwarm(hosts, obj, verbose, timeout)
	local retVal = {}
	for k, v in pairs(rpc.query(hosts[1], {cmd="list", obj=obj})) do
		-- print(k..": "..tostring(v))
		retVal[k] = function (...)
			local tArgs = {...}
			local retVal2 = {}
			local msg = {cmd="rpc", obj=obj, method=k, args=tArgs}
			local fns = {}
			for k2, host in pairs(hosts) do
				-- print(k2..": "..tostring(host))
				fns[#fns + 1] = function ()
						-- print(host, msg) 
						retVal2[host] = rpc.query(host, msg) 
					end
			end
			parallel.waitForAll(unpack(fns))
			return retVal2
			--return unpack(query(host, msg))
		end
	end
	return retVal
end

function scan()
	local msg = {cmd="ping", token=createToken()}
	msg = textutils.serialize(msg)
	rednet.broadcast(msg, rpc.PROTOCOLL)
	
	local retVal = {}
	while true do
		-- print("hi")
		p1, p2 = rednet.receive(PROTOCOLL, 2)
		if not p1 then
			break
		end
		retVal[#retVal + 1] = p1
	end
	return retVal
end

--------------------------------------------------------------------------------
--	CLI
--------------------------------------------------------------------------------
local function trimWordList(choices, curText)
	local retVal = {}
	for idx = 1, #choices do
		local word = choices[idx]
		if word:sub(1, #curText) == curText then
			retVal[#retVal + 1] = word:sub(#curText + 1)
		end
	end
	return retVal
end

--	http://computercraft.info/wiki/Shell.setCompletionFunction
local function tabCompletionFunction(shell, parNumber, curText, lastText)
	-- print("curText:",curText,"#")
	-- print("parNumber:",parNumber,"#")
	-- for k, v in pairs(lastText) do
		-- print(k..": "..tostring(v))
	-- end	

	
	local retVal = {}
	if parNumber == 1 then
		return trimWordList({"scan", "help", "version", "install"}, curText)
		
	elseif parNumber == 2 then
		if lastText[#lastText] == "install" then
			return trimWordList({"aaa", "bbb"}, curText)
		end
	end
	
	
	return {}
end

function registerCompletionFunction(shell)
	shell.setCompletionFunction("bin/rpc", tabCompletionFunction)
end
